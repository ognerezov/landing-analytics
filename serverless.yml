plugins:
  - serverless-offline
  - serverless-dotenv-plugin

service: sqs-redis
frameworkVersion: '2||3'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: eu-west-1
  vpc:
    securityGroupIds:
      - sg-06b3510c74b619849
    subnetIds:
      - subnet-0e78d64e2d6144526
      - subnet-087f03708ffde1fe7
  iam:
    role:
      managedPolicies:
        - 'arn:aws:iam::992648939501:policy/SQSOperator'
        - 'arn:aws:iam::992648939501:policy/SendEmails'
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "logs:CreateLogGroup"
#        - "logs:CreateLogStream"
#        - "logs:PutLogEvents"
#        - "ec2:CreateNetworkInterface"
#        - "ec2:DescribeNetworkInterfaces"
#        - "ec2:DeleteNetworkInterface"
#        - "ec2:AssignPrivateIpAddresses"
#        - "ec2:UnassignPrivateIpAddresses"
#      Resource: "*"
#    - Effect: "Allow"
#      Action:
#        - "sqs:*"
#      Resource: "*"
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**
functions:
  sqs-redis:
    handler: sqsToRedis.receive
    events:
        - sqs:
            arn: arn:aws:sqs:eu-west-1:992648939501:landing-events
            batchSize: 10
            maximumBatchingWindow: 300
  read-redis:
    handler: readRedis.read
    timeout: 10
    events:
      - schedule:
          rate: rate(30 minutes)
      - httpApi:
          path: /redis
          method:  '*'
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
